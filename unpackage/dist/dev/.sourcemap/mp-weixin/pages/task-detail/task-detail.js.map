{"version":3,"file":"task-detail.js","sources":["pages/task-detail/task-detail.vue","D:/浏览器下载/HBuilderX.4.66.2025051912/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvdGFzay1kZXRhaWwvdGFzay1kZXRhaWwudnVl"],"sourcesContent":["<template>\n  <view class=\"container\">\n    <!-- 顶部导航 -->\n    <view class=\"nav-bar\">\n      <view class=\"nav-left\" @click=\"goBack\">\n        <text class=\"icon\">←</text>\n      </view>\n      <text class=\"nav-title\">任务详情</text>\n      <view class=\"nav-right\">\n        <text class=\"icon\">⋮⋮</text>\n      </view>\n    </view>\n    \n    <!-- 新建小区按钮和切换小区按钮 -->\n    <view class=\"new-plot-btn-container\">\n      <button class=\"new-plot-btn\" @click=\"showNewPlotModal = true\">新建小区</button>\n      <button class=\"new-plot-btn switch-plot-btn\" @click=\"openSwitchModal\">切换小区</button>\n    </view>\n    \n    <!-- 任务信息 -->\n    <view class=\"info-card\">\n      <view class=\"info-item\">\n        <text class=\"info-label\">任务ID：</text>\n        <text class=\"info-value\">{{ task.id }}</text>\n      </view>\n      <view class=\"info-item\">\n        <text class=\"info-label\">任务名称：</text>\n        <text class=\"info-value\">{{ task.taskName }}</text>\n      </view>\n      <view class=\"info-item\">\n        <text class=\"info-label\">小区编号：</text>\n        <text class=\"info-value\">{{ task.position }}</text>\n      </view>\n      <view class=\"info-item\">\n        <text class=\"info-label\">小区描述：</text>\n        <text class=\"info-value\">{{ plotDescription }}</text>\n      </view>\n    </view>\n    \n    <!-- 图片列表 - 修改为列表形式展示imageNum -->\n    <view class=\"image-list-container\">\n      <scroll-view class=\"image-list\" scroll-y>\n        <view v-if=\"filteredImages.length === 0\" class=\"empty-tip\">\n          <text>暂无图片数据</text>\n        </view>\n        <view \n          v-for=\"(img, index) in filteredImages\" \n          :key=\"img.id\" \n          class=\"image-item\"\n          @click=\"toggleSelect(img)\"\n        >\n          <view class=\"image-info-list\">\n            <view class=\"image-status\">{{ getStatusText(img.status) }}</view>\n            <!-- 移除点击事件 -->\n            <view class=\"image-id\">{{ img.imageNum || '未获取到编号' }}</view> \n            <view v-if=\"img.selected\" class=\"selected-mask-list\">\n              <view class=\"selected-icon\">✓</view>\n            </view>\n          </view>\n        </view>\n      </scroll-view>\n      \n      <!-- 分页控件 -->\n      <view class=\"pagination\" v-if=\"totalPages > 1\">\n        <button class=\"page-btn prev\" @click=\"prevPage\" :disabled=\"currentPage === 1\">上一页</button>\n        <text class=\"page-info\">第 {{ currentPage }} 页 / 共 {{ totalPages }} 页</text>\n        <button class=\"page-btn next\" @click=\"nextPage\" :disabled=\"currentPage === totalPages\">下一页</button>\n      </view>\n    </view>\n    \n    <!-- 底部操作栏 -->\n    <view class=\"action-bar\">\n      <button class=\"action-btn upload\" @click=\"handleRefresh\">刷新</button>\n      <button class=\"action-btn view\" @click=\"handleView\">查看</button>\n      <button class=\"action-btn delete\" @click=\"handleDelete\">删除</button>\n      <button class=\"action-btn capture\" @click=\"goToCollect\">采集</button>\n    </view>\n    \n    <!-- 新建小区弹窗 - 优化样式 -->\n    <view class=\"modal\" v-if=\"showNewPlotModal\">\n      <view class=\"modal-content new-plot-modal\">\n        <view class=\"modal-header\">\n          <text class=\"modal-title\">新建小区</text>\n        </view>\n        <view class=\"modal-body\">\n          <view class=\"form-group\">\n            <view class=\"form-item\">\n              <label class=\"form-label\">小区编号：</label>\n              <input class=\"form-input\" v-model=\"newPlotId\" placeholder=\"请输入小区编号\" />\n            </view>\n            <view class=\"form-item\">\n              <label class=\"form-label\">小区描述：</label>\n              <input class=\"form-input\" v-model=\"newPlotDesc\" placeholder=\"请输入小区描述\" />\n            </view>\n          </view>\n        </view>\n        <view class=\"modal-footer\">\n          <button class=\"modal-btn cancel\" @click=\"cancelNewPlot\">取消</button>\n          <button class=\"modal-btn confirm\" @click=\"confirmNewPlot\" :disabled=\"isSubmitting\">\n            <text v-if=\"!isSubmitting\">确认</text>\n            <text v-else>提交中...</text>\n          </button>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 未上传图片提示弹窗 -->\n    <view class=\"modal\" v-if=\"showUnuploadedWarning\">\n      <view class=\"modal-content warning\">\n        <view class=\"modal-header\">\n          <text class=\"modal-title\">提示</text>\n        </view>\n        <view class=\"modal-body\">\n          <text>当前存在未上传的图片，是否继续新建小区？</text>\n        </view>\n        <view class=\"modal-footer\">\n          <button class=\"modal-btn cancel\" @click=\"cancelNewPlot\">返回</button>\n          <button class=\"modal-btn confirm\" @click=\"forceNewPlot\" :disabled=\"isSubmitting\">\n            <text v-if=\"!isSubmitting\">确认</text>\n            <text v-else>提交中...</text>\n          </button>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 切换小区弹窗 -->\n    <view class=\"modal\" v-if=\"showSwitchModal\">\n      <view class=\"modal-content switch-modal\">\n        <view class=\"modal-header\">\n          <text class=\"modal-title\">切换小区</text>\n        </view>\n        <view class=\"modal-body\">\n          <!-- 加载状态提示 -->\n          <view v-if=\"loadingCells\" class=\"loading-tip\">\n            <text>小区数据加载中...</text>\n          </view>\n          \n          <!-- 错误提示 -->\n          <view v-if=\"loadError\" class=\"error-tip\">\n            <text>{{ errorMessage }}</text>\n            <button class=\"retry-btn\" @click=\"loadCells\">重试</button>\n          </view>\n          \n          <!-- 小区列表 -->\n          <scroll-view scroll-y class=\"cell-list\" style=\"height: 500rpx;\" v-if=\"!loadingCells && !loadError\">\n            <view \n              v-for=\"(cell, index) in visibleCells\" \n              :key=\"cell.id\" \n              class=\"cell-item\"\n              @click=\"selectCell(cell)\"\n            >\n              <view class=\"cell-info\">\n                <text class=\"cell-id\">小区编号：{{ cell.blockNum }}</text>\n                <text class=\"cell-desc\">小区描述：{{ cell.blockName }}</text>\n              </view>\n              <view class=\"cell-actions\">\n                <view class=\"cell-arrow\"></view>\n                <button class=\"delete-btn\" @click.stop=\"showDeleteConfirm(cell, index)\">删除</button>\n              </view>\n            </view>\n            \n            <!-- 空数据提示 -->\n            <view v-if=\"visibleCells.length === 0\" class=\"empty-tip\">\n              <text>暂无小区数据</text>\n            </view>\n          </scroll-view>\n          \n          <!-- 分页控件 -->\n          <view class=\"pagination\" v-if=\"totalPages > 1\">\n            <button class=\"page-btn prev\" @click=\"prevPage\" :disabled=\"currentPage === 1\">上一页</button>\n            <text class=\"page-info\">第 {{ currentPage }} 页 / 共 {{ totalPages }} 页</text>\n            <button class=\"page-btn next\" @click=\"nextPage\" :disabled=\"currentPage === totalPages\">下一页</button>\n          </view>\n        </view>\n        <view class=\"modal-footer\">\n          <button class=\"modal-btn cancel\" @click=\"showSwitchModal = false\">取消</button>\n        </view>\n      </view>\n    </view>\n    \n    <!-- 删除确认弹窗 -->\n    <view class=\"modal\" v-if=\"showDeleteDialog\">\n      <view class=\"modal-content delete-modal\">\n        <view class=\"modal-header\">\n          <text class=\"modal-title\">删除确认</text>\n        </view>\n        <view class=\"modal-body\">\n          <text>确定要删除小区 {{ deleteCellInfo.blockNum }} 吗？</text>\n        </view>\n        <view class=\"modal-footer\">\n          <button class=\"modal-btn cancel\" @click=\"showDeleteDialog = false\">取消</button>\n          <button class=\"modal-btn confirm\" @click=\"confirmDeleteCell\" :disabled=\"isDeleting\">\n            <text v-if=\"!isDeleting\">确认删除</text>\n            <text v-else>删除中...</text>\n          </button>\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      task: {\n        id: '1937794845536321538',\n        taskName: '田间任务调查2',\n        position: ''\n      },\n      plotDescription: '',\n      images: [],\n      // 新增分页相关数据\n      currentPage: 1,\n      pageSize: 10, // 修改为每页10条记录\n      // 其他原有数据\n      showNewPlotModal: false,\n      showUnuploadedWarning: false,\n      newPlotId: '',\n      newPlotDesc: '',\n      isSubmitting: false,\n      baseUrl: 'https://larsc.hzau.edu.cn/prod-api',\n      \n      // 切换小区相关数据\n      showSwitchModal: false,\n      loadingCells: false,\n      loadError: false,\n      errorMessage: '',\n      totalCells: 0,\n      visibleCells: [],\n      \n      // 删除相关数据\n      showDeleteDialog: false,\n      deleteCellInfo: {},\n      isDeleting: false\n    }\n  },\n  computed: {\n    // 计算总页数\n    totalPages() {\n      return Math.ceil(this.totalCells / this.pageSize);\n    },\n    // 计算当前页显示的图片列表\n    filteredImages() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      const endIndex = startIndex + this.pageSize;\n      return this.images.slice(startIndex, endIndex);\n    }\n  },\n   onLoad(options) {\r\n      this.task.id = options.id || this.task.id;\r\n      this.task.taskName = decodeURIComponent(options.desc || this.task.taskName);\r\n      this.loadCells().then(() => {\r\n        if (this.visibleCells.length > 0) {\r\n          const firstCell = this.visibleCells[0];\r\n          this.task.position = firstCell.blockNum;\r\n          this.plotDescription = firstCell.blockName;\r\n          uni.setStorageSync('blockId', firstCell.id);\r\n          uni.setStorageSync('blockNum', firstCell.blockNum);\r\n          this.loadImages(); // 初始化加载图片\r\n        }\r\n      });\r\n    },\r\n    \r\n    onShow() {\r\n      // 从页面返回时重新加载图片\r\n      if (uni.getStorageSync('blockId')) {\r\n        this.loadImages();\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      // 修改后的loadImages方法\r\n      async loadImages() {\r\n        const blockId = uni.getStorageSync('blockId');\r\n        if (!blockId) {\r\n          console.error('未获取到blockId');\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          const token = uni.getStorageSync('token');\r\n          if (!token) {\r\n            throw new Error('用户未登录');\r\n          }\r\n          \r\n          // 清空现有图片数据\r\n          this.images = [];\r\n          \r\n          const response = await uni.request({\r\n            url: `${this.baseUrl}/plant-disease/blockList?blockId=${blockId}`,\r\n            method: 'GET',\r\n            header: {\r\n              'Authorization': token,\r\n              'Accept': '*/*'\r\n            }\r\n          });\r\n          \r\n          let res = Array.isArray(response) ? response[0] : response;\r\n          \r\n          if (res.statusCode === 200 && res.data?.code === 200) {\r\n            // 解析接口返回的imageNum作为图片编号\r\n            this.images = (res.data.data || []).map(item => ({\r\n              ...item,\r\n              imageNum: item.imageNum || `未命名_${item.id}`,\r\n              selected: false\r\n            }));\r\n            \r\n            // 重置分页\r\n            this.currentPage = 1;\r\n          } else {\r\n            throw new Error(res.data?.msg || '加载图片数据失败');\r\n          }\r\n        } catch (error) {\r\n          console.error('加载图片数据失败:', error);\r\n          uni.showToast({\r\n            title: error.message || '网络请求失败',\r\n            icon: 'none'\r\n          });\r\n        }\r\n      },\r\n      \r\n      // 修改后的handleRefresh方法\r\n      async handleRefresh() {\r\n        uni.showLoading({ title: '刷新中...' });\r\n        try {\r\n          await this.loadImages();\r\n          uni.showToast({\r\n            title: '刷新成功',\r\n            icon: 'success'\r\n          });\r\n        } catch (error) {\r\n          console.error('刷新失败:', error);\r\n          uni.showToast({\r\n            title: error.message || '刷新失败',\r\n            icon: 'none'\r\n          });\r\n        } finally {\r\n          uni.hideLoading();\r\n        }\r\n      },\r\n      \r\n      // 修改后的selectCell方法\r\n      selectCell(cell) {\r\n        // 清除之前选中的图片\r\n        this.images = [];\r\n        \r\n        this.task.position = cell.blockNum;\r\n        this.plotDescription = cell.blockName;\r\n        uni.setStorageSync('blockId', cell.id);\r\n        uni.setStorageSync('blockNum', cell.blockNum);\r\n        \r\n        this.showSwitchModal = false;\r\n        uni.showToast({\r\n          title: `已切换到小区: ${cell.blockNum}`,\r\n          icon: 'success'\r\n        });\r\n        \r\n        // 加载新小区的图片\r\n        this.loadImages();\r\n      },\n    \n    async loadImages() {\n      const blockId = uni.getStorageSync('blockId');\n      if (!blockId) return;\n      \n      try {\n        const token = uni.getStorageSync('token');\n        if (!token) {\n          throw new Error('用户未登录');\n        }\n        \n        const response = await uni.request({\n          url: `${this.baseUrl}/plant-disease/blockList?blockId=${blockId}`,\n          method: 'GET',\n          header: {\n            'Authorization': token,\n            'Accept': '*/*'\n          }\n        });\n        \n        let res = Array.isArray(response) ? response[0] : response;\n        \n        if (res.statusCode === 200 && res.data?.code === 200) {\n          // 解析接口返回的imageNum作为图片编号\n          this.images = (res.data.data || []).map(item => ({\n            ...item,\n            // 确保imageNum存在，避免undefined\n            imageNum: item.imageNum || `未命名_${item.id}`\n          }));\n        } else {\n          throw new Error(res.data?.msg || '加载图片数据失败');\n        }\n      } catch (error) {\n        console.error('加载图片数据失败:', error);\n        uni.showToast({\n          title: error.message || '网络请求失败',\n          icon: 'none'\n        });\n      }\n    },\n    \n    goBack() {\n      uni.navigateBack();\n    },\n    \n    toggleSelect(img) {\n      img.selected = !img.selected;\n    },\n    \n    getStatusText(status) {\n      const map = {\n        new: '新建',\n        started: '进行中',\n        ended: '已完成',\n        uploaded: '已上传',\n        notUploaded: '未上传'\n      };\n      return map[status] || status;\n    },\n    \n    \n    // 查看单张图片详情\n    viewImageDetail(img) {\n      if (!img.imageNum) {\n        uni.showToast({\n          title: '图片编号不存在',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      uni.navigateTo({\n        url: `/pages/result/result?` +\n             `taskId=${this.task.id}&` +\n             `taskName=${this.task.taskName}&` +\n             `plotId=${img.blockId || ''}&` +\n             `plotName=${img.blockName || ''}&` +\n             `imgId=${img.imageNum}&` +\n             `branchTaskId=${this.task.id}&` +\n             `blockId=${img.blockId || ''}&` +\n             `imageNum=${img.imageNum}`\n      });\n    },\n    \n    handleView() {\n      const selected = this.images.filter(img => img.selected);\n      if (selected.length !== 1) {\n        uni.showToast({\n          title: '请选择一张图片查看',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      this.viewImageDetail(selected[0]);\n    },\n    \n    async handleDelete() {\n      const selected = this.images.filter(img => img.selected);\n      if (selected.length === 0) {\n        uni.showToast({\n          title: '请先选择要删除的图片',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      uni.showModal({\n        title: '确认删除',\n        content: `确定要删除选中的${ selected.length }张图片吗？`,\n        success: async (res) => {\n          if (res.confirm) {\n            const token = uni.getStorageSync('token');\n            if (!token) {\n              uni.showToast({\n                title: '请先登录',\n                icon: 'none'\n              });\n              return;\n            }\n\n            for (const img of selected) {\n              try {\n                const response = await uni.request({\n                  url: `${this.baseUrl}/plant-disease/${img.id}`,\n                  method: 'POST',\n                  header: {\n                    'Authorization': token,\n                    'Accept': '*/*'\n                  }\n                });\n\n                let res = Array.isArray(response) ? response[0] : response;\n\n                if (res.statusCode === 200) {\n                  console.log(`图片 ${img.id} 删除成功`);\n                } else {\n                  throw new Error(res.data?.msg || '删除图片失败');\n                }\n              } catch (error) {\n                console.error(`删除图片 ${img.id} 失败:`, error);\n                uni.showToast({\n                  title: error.message || '删除图片失败',\n                  icon: 'none'\n                });\n              }\n            }\n\n            // 重新加载图片数据\n            await this.loadImages();\n            uni.showToast({ title: '删除成功' });\n          }\n        }\n      });\n    },\n    \n    goToCollect() {\n      uni.setStorageSync('branchTaskId', this.task.id);\n      uni.setStorageSync('branchTaskName', this.task.taskName);\n      uni.setStorageSync('blockNum', this.task.position);\n      uni.setStorageSync('blockName', this.plotDescription);\n      \n      uni.navigateTo({\n        url: `/pages/collect/collect?taskId=${this.task.id}`\n      });\n    },\n    \n    checkUnuploadedImages() {\n      return this.images.some(img => img.status === 'notUploaded');\n    },\n    \n    cancelNewPlot() {\n      this.showNewPlotModal = false;\n      this.showUnuploadedWarning = false;\n      this.newPlotId = '';\n      this.newPlotDesc = '';\n      this.isSubmitting = false;\n    },\n    \n    async addNewPlot() {\n      try {\n        this.isSubmitting = true;\n        \n        const token = uni.getStorageSync('token');\n        if (!token) {\n          uni.showToast({\n            title: '请先登录',\n            icon: 'none'\n          });\n          this.isSubmitting = false;\n          return;\n        }\n        \n        const response = await uni.request({\n          url: `${this.baseUrl}/block/add`,\n          method: 'POST',\n          header: {\n            'Authorization': token,\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n          },\n          data: {\n            branchTaskId: this.task.id,\n            blockNum: this.newPlotId,\n            blockName: this.newPlotDesc,\n            remark: this.newPlotDesc\n          }\n        });\n        \n        let res = Array.isArray(response) ? response[0] : response;\n        \n        if (res.data?.code === 200) {\n          this.task.position = this.newPlotId;\n          this.plotDescription = this.newPlotDesc;\n          this.images = [];\n          uni.showToast({\n            title: '小区创建成功',\n            icon: 'success'\n          });\n          this.cancelNewPlot();\n        } else {\n          const errorMsg = res.data?.msg || '创建小区失败';\n          throw new Error(errorMsg);\n        }\n      } catch (error) {\n        console.error('创建小区失败:', error);\n        uni.showToast({\n          title: error.message || '创建小区失败',\n          icon: 'none'\n        });\n      } finally {\n        this.isSubmitting = false;\n      }\n    },\n    \n    confirmNewPlot() {\n      if (!this.newPlotId) {\n        uni.showToast({\n          title: '请输入小区编号',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      if (this.checkUnuploadedImages()) {\n        this.showNewPlotModal = false;\n        this.showUnuploadedWarning = true;\n      } else {\n        this.addNewPlot();\n      }\n    },\n    \n    forceNewPlot() {\n      this.addNewPlot();\n    },\n    \n    // 切换小区相关方法\n    openSwitchModal() {\n      this.showSwitchModal = true;\n      this.currentPage = 1;\n      this.loadCells();\n    },\n    \n    async loadCells() {\n      this.loadingCells = true;\n      this.loadError = false;\n      \n      try {\n        const token = uni.getStorageSync('token');\n        if (!token) {\n          throw new Error('用户未登录');\n        }\n        \n        const params = {\n          currentPageCount: this.currentPage,\n          pageSize: this.pageSize,\n          branchTaskId: this.task.id\n        };\n        \n        const response = await uni.request({\n          url: `${this.baseUrl}/block/blockList`,\n          method: 'GET',\n          header: {\n            'Authorization': token,\n            'Accept': '*/*'\n          },\n          data: params\n        });\n        \n        let res = Array.isArray(response) ? response[0] : response;\n        \n        if (res.statusCode === 200 && res.data?.code === 200) {\n          const apiData = res.data.data;\n          this.visibleCells = (apiData.records || []).map(item => ({\n            id: item.id,\n            blockNum: item.blockNum,\n            blockName: item.blockName,\n            remark: item.remark\n          }));\n          \n          this.totalCells = apiData.total || 0;\n        } else {\n          throw new Error(res.data?.msg || '加载小区数据失败');\n        }\n      } catch (error) {\n        console.error('加载小区数据失败:', error);\n        this.loadError = true;\n        this.errorMessage = error.message || '网络请求失败';\n        this.visibleCells = [];\n      } finally {\n        this.loadingCells = false;\n      }\n    },\n    \n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.loadCells();\n      }\n    },\n    \n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.loadCells();\n      }\n    },\n    \n    selectCell(cell) {\n      this.task.position = cell.blockNum;\n      this.plotDescription = cell.blockName;\n      uni.setStorageSync('blockId', cell.id);\n      console.log('blockId', cell.id);\n      uni.setStorageSync('blockNum', cell.blockNum);\n      console.log('blockNum', cell.blockNum);\n      this.showSwitchModal = false;\n      uni.showToast({\n        title: `已切换到小区: ${cell.blockNum}`,\n        icon: 'success'\n      });\n      this.loadImages();\n    },\n    \n    // 显示删除确认\n    showDeleteConfirm(cell, index) {\n      uni.vibrateShort();\n      this.deleteCellInfo = cell;\n      this.showDeleteDialog = true;\n    },\n    // 确认删除小区\n    async confirmDeleteCell() {\n      if (this.isDeleting) return;\n      \n      try {\n        this.isDeleting = true;\n        const token = uni.getStorageSync('token');\n        \n        const response = await uni.request({\n          url: `${this.baseUrl}/block/${this.deleteCellInfo.id}`,\n          method: 'POST',\n          header: {\n            'Authorization': token,\n            'Accept': '*/*'\n          }\n        });\n        \n        let res = Array.isArray(response) ? response[0] : response;\n        \n        if (res.statusCode === 200) {\n          uni.showToast({\n            title: '删除成功',\n            icon: 'success'\n          });\n          \n          // 重新加载数据\n          this.loadCells();\n          \n          // 如果删除的是当前小区，重置为默认值\n          if (this.task.position === this.deleteCellInfo.blockNum) {\n            this.task.position = '';\n            this.plotDescription = '';\n          }\n        } else {\n          throw new Error(res.data?.msg || '删除失败');\n        }\n      } catch (error) {\n        console.error('删除小区失败:', error);\n        uni.showToast({\n          title: error.message || '删除失败',\n          icon: 'none'\n        });\n      } finally {\n        this.isDeleting = false;\n        this.showDeleteDialog = false;\n      }\n    },\n  }\n}\n</script>\n<style scoped>\n/* 样式部分保持不变 */\n.container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #f5f5f5;\n}\n/* 导航栏样式 */\n.nav-bar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 30rpx;\n  background-color: #fff;\n  border-bottom: 1rpx solid #f0f0f0;\n  height: 90rpx;\n}\n.nav-title {\n  font-size: 36rpx;\n  font-weight: 600;\n  color: #333;\n}\n.icon {\n  font-size: 36rpx;\n  color: #666;\n}\n/* 按钮容器 */\n.new-plot-btn-container {\n  padding: 20rpx 30rpx;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  gap: 20rpx;\n}\n.new-plot-btn {\n  width: 100%;\n  height: 80rpx;\n  border-radius: 40rpx;\n  background-color: #4CAF50;\n  color: white;\n  font-size: 28rpx;\n  border: none;\n  font-weight: 500;\n  box-shadow: 0 4rpx 12rpx rgba(76, 175, 80, 0.15);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.switch-plot-btn {\n  background-color: #2196F3;\n}\n/* 任务信息卡片 */\n.info-card {\n  background-color: #4CAF50;\n  border-radius: 16rpx;\n  padding: 30rpx;\n  margin: 20rpx 30rpx;\n  color: white;\n  box-shadow: 0 4rpx 12rpx rgba(76, 175, 80, 0.15);\n}\n.info-item {\n  display: flex;\n  margin-bottom: 20rpx;\n  align-items: center;\n}\n.info-label {\n  width: 160rpx;\n  font-size: 28rpx;\n}\n.info-value {\n  flex: 1;\n  font-size: 28rpx;\n}\n/* 图片列表容器 */\n.image-list-container {\n  flex: 1;\n  padding: 20rpx 30rpx;\n}\n.image-list {\n  background-color: #fff;\n  border-radius: 16rpx;\n  padding: 20rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);\n  height: calc(100vh - 400rpx); /* 计算高度以适配页面 */\n}\n.image-item {\n  padding: 20rpx;\n  border-bottom: 1rpx solid #f5f5f5;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.image-info-list {\n  flex: 1;\n}\n.image-status {\n  font-size: 24rpx;\n  color: #666;\n  margin-bottom: 8rpx;\n}\n.image-id {\n  font-size: 28rpx;\n  font-weight: 500;\n  color: #333;\n  cursor: pointer;\n}\n.selected-mask-list {\n  position: absolute;\n  top: 20rpx;\n  right: 20rpx;\n  width: 60rpx;\n  height: 60rpx;\n  background-color: rgba(7, 193, 96, 0.8);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n}\n.selected-icon {\n  color: white;\n  font-size: 32rpx;\n}\n/* 底部操作栏 */\n.action-bar {\n  display: flex;\n  justify-content: space-between;\n  padding: 20rpx 30rpx;\n  background-color: #fff;\n  border-top: 1rpx solid #f0f0f0;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n}\n.action-btn {\n  flex: 1;\n  margin: 0 10rpx;\n  height: 80rpx;\n  border-radius: 40rpx;\n  font-size: 28rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n}\n.upload {\n  background-color: #2196F3;\n  color: white;\n  box-shadow: 0 4rpx 12rpx rgba(33, 150, 243, 0.2);\n}\n.view {\n  background-color: #4CAF50;\n  color: white;\n  box-shadow: 0 4rpx 12rpx rgba(76, 175, 80, 0.2);\n}\n.delete {\n  background-color: #F44336;\n  color: white;\n  box-shadow: 0 4rpx 12rpx rgba(244, 67, 54, 0.2);\n}\n.capture {\n  background-color: #FF9800;\n  color: white;\n  box-shadow: 0 4rpx 12rpx rgba(255, 152, 0, 0.2);\n}\n/* 弹窗通用样式 */\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n}\n.modal-content {\n  background-color: #fff;\n  width: 80%;\n  border-radius: 20rpx;\n  overflow: hidden;\n  box-shadow: 0 8rpx 32rpx rgba(0, 0, 0, 0.15);\n  max-height: 80vh;\n  overflow-y: auto;\n}\n.modal-header {\n  padding: 30rpx 0;\n  border-bottom: 1rpx solid #f0f0f0;\n  text-align: center;\n}\n.modal-title {\n  font-size: 32rpx;\n  font-weight: 600;\n  color: #333;\n}\n.modal-body {\n  padding: 30rpx;\n}\n.modal-footer {\n  display: flex;\n  border-top: 1rpx solid #f0f0f0;\n}\n.modal-btn {\n  flex: 1;\n  height: 88rpx;\n  line-height: 88rpx;\n  text-align: center;\n  background: none;\n  border: none;\n  font-size: 30rpx;\n  font-weight: 500;\n}\n.modal-btn.cancel {\n  color: #999;\n}\n.modal-btn.confirm {\n  color: #4CAF50;\n}\n/* 新建小区弹窗特定样式 */\n.new-plot-modal {\n  width: 85%;\n}\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 20rpx;\n}\n.form-item {\n  display: flex;\n  align-items: center;\n  gap: 20rpx;\n  margin-bottom: 20rpx;\n}\n.form-label {\n  width: 180rpx;\n  font-size: 28rpx;\n  color: #333;\n  font-weight: 500;\n}\n.form-input {\n  flex: 1;\n  height: 70rpx;\n  background-color: #f5f5f5;\n  border-radius: 10rpx;\n  padding: 0 20rpx;\n  font-size: 28rpx;\n  border: none;\n}\n/* 切换小区弹窗特定样式 */\n.switch-modal {\n  width: 85%;\n}\n.cell-list {\n  margin-bottom: 30rpx;\n}\n.cell-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 28rpx 30rpx;\n  border-bottom: 1rpx solid #f5f5f5;\n  transition: all 0.2s;\n  position: relative;\n}\n.cell-item:active {\n  background-color: #f9f9f9;\n  transform: scale(0.98);\n}\n.cell-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.cell-id {\n  font-size: 30rpx;\n  color: #333;\n  font-weight: 500;\n  margin-bottom: 10rpx;\n}\n.cell-desc {\n  font-size: 26rpx;\n  color: #666;\n}\n.cell-actions {\n  display: flex;\n  align-items: center;\n  gap: 15rpx;\n}\n.cell-arrow {\n  font-size: 32rpx;\n  color: #999;\n}\n.delete-btn {\n  background-color: #F44336;\n  color: white;\n  border: none;\n  border-radius: 30rpx;\n  padding: 8rpx 20rpx;\n  font-size: 24rpx;\n  height: 40rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 80rpx;\n}\n/* 分页样式 */\n.pagination {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20rpx 0;\n  padding: 20rpx 0;\n  border-top: 1rpx solid #f5f5f5;\n  border-bottom: 1rpx solid #f5f5f5;\n}\n.page-btn {\n  padding: 12rpx 30rpx;\n  font-size: 28rpx;\n  margin: 0 15rpx;\n  background-color: #4CAF50;\n  color: white;\n  border-radius: 8rpx;\n  border: none;\n  transition: all 0.2s;\n}\n.page-btn:hover {\n  background-color: #45a049;\n}\n.page-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n.page-info {\n  font-size: 28rpx;\n  margin: 0 20rpx;\n  color: #666;\n}\n/* 新增样式 */\n.loading-tip, .error-tip, .empty-tip {\n  height: 400rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 28rpx;\n  color: #666;\n  flex-direction: column;\n}\n.error-tip {\n  color: #f44336;\n}\n.retry-btn {\n  margin-top: 20rpx;\n  padding: 10rpx 30rpx;\n  background-color: #4CAF50;\n  color: white;\n  border-radius: 8rpx;\n  border: none;\n  font-size: 28rpx;\n}\n</style>","import MiniProgramPage from 'C:/Users/25855/Desktop/狮山云瞳/狮山云瞳/狮山云瞳/狮山云瞳/pages/task-detail/task-detail.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","res"],"mappings":"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"}